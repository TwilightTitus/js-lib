{
	"text": "Summary of all functions",
	"articles": [
		{
			"tag": "jstl-processor",
			"title": "JSTL Processor",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"headline": "Processing pipeline",
					"content": "Processor flags -> jstl-if > jstl-data > jstl-include > jstl-choose > jstl-foreach > jstl-add-attribute > text replacements > attribute value replacements"
				},
				{
					"type": "text",
					"headline": "jstl-autorun",
					"content": "With \"jstl-autorun\" start the JSTL direct after page load. Its simalar to:"
				},
				{
					"type": "code",
					"codetype": "javascript",
					"content": [
						"$(document).ready(function(){",
						"\tvar settings = {",
						"\t\tdata:{},//context data to processing",
						"\t\tonLoad:function(){},",
						"\t\tonSuccess:function(){},",
						"\t\tonFail:function(){},",
						"\t};",
						"\t$('[jstl-autorun]').each(function(){",
						"\t\t$(this).jstl(settings);// settings is optional",
						"\t});",
						"});"
					]
				},
				{
					"type": "text",
					"headline": "jstl-load",
					"content": "The processor would be evaluate the attribute value and execute the content!"
				},
				{
					"type": "code",
					"codetype": "html",
					"content": "<[any tag] jstl-load=\"${expression}|javascript function\"></[any tag]>"
				},
				{
					"type": "text",
					"headline": "jstl-success",
					"content": "The processor would be evaluate the attribute value and execute the content!"
				},
				{
					"type": "code",
					"codetype": "html",
					"content": "<[any tag] jstl-success=\"${expression}|javascript function\"></[any tag]>"
				},
				{
					"type": "text",
					"headline": "jstl-fail",
					"content": "The processor would be evaluate the attribute value and execute the content!"
				},
				{
					"type": "code",
					"codetype": "html",
					"content": "<[any tag] jstl-fail=\"${expression}|javascript function\"></[any tag]>"
				},
				{
					"type": "text",
					"headline": "jstl-ignore",
					"content": "With \"jstl-ignore\" you can contol if an element to be processed by jstl. This flag would be ignored if you are calling JSTL directly at this element. The value of \"jstl-ignore\" will be evaluated to a boolean. Is the value empty then is the value \"true\"!"
				},
				{
					"type": "code",
					"codetype": "html",
					"content": "<[any tag] jstl-ignore=\"empty|true|false|${expression}\"></[any tag]>"
				},
				{
					"type": "text",
					"headline": "jstl-ignore-childs",
					"content": "With \"jstl-ignore-childs\" you can contol if the childs of an element to be processed by jstl. The value of \"jstl-ignore-childs\" will be evaluated to a boolean. Is the value empty then is the value \"true\"!"
				},
				{
					"type": "code",
					"codetype": "html",
					"content": "<[any tag] jstl-ignore-childs=\"empty|true|false|${expression}\">[content]</[any tag]>"
				},
				{
					"type": "text",
					"headline": "jstl-async",
					"content": "\"jstl-async\" this attribute tells the processor to process the element later! (experimental)"
				},
				{
					"type": "text",
					"headline": "<jstl/> Tag",
					"content": "If you want you can use the \"<jstl/>\" tag. This tag helps you if you want a flatten dom sturcture. Has the \"<jstl/>\" tag content, then the \"<jstl/>\" tag will be replaced with there content!"
				},
				{
					"type": "code",
					"codetype": "html",
					"content": "<jstl [any jstl-attributes]>[content]</jstl>"
				}
			]
		},
		{
			"tag": "jstl-event",
			"title": "JSTL Events",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"headline": "JSTL Events",
					"content": [ 
						"The JSTL provides events: \"jstl-on-start\", \"jstl-on-load\", \"jstl-on-success\", \"jstl-on-ready\", \"jstl-on-fail\"",
						"",
						"The events are catchable by jQuery."
					]
				},
				{
					"type": "text",
					"headline": "jstl-on-start",
					"content": "This event would be fired, only at the root element of processing."
				},
				{
					"type": "text",
					"headline": "jstl-on-load",
					"content": "This event would be fired, if JSTL starts the templating process on each dom element."
				},				
				{
					"type": "text",
					"headline": "jstl-on-success",
					"content": "This event would be fired, if a dom element and all childs processed. This event would be fires for every element."
				},
				{
					"type": "text",
					"headline": "jstl-on-ready",
					"content": "This event would be fired, if JSTL process finished."
				},
				{
					"type": "text",
					"headline": "jstl-on-fail",
					"content": "This event would be fired, if JSTL detect an error."
				},
				{
					"type": "code",
					"codetype": "javascript",
					"headline": "event listener signatur",
					"content": "function(event, dataContext, jstlProcessor){}"
				}
			]
		},
		{
			"tag": "expression",
			"title": "Expression",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "The expression is the important function and the powerful function of the JSTL. With an expression you can get values from the data context or you can execute an javascript function. You have to provide full freedom to do what is necessary"
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "expression syntax",
					"content": "${[your expression]}",
					"subcontent": "Your expression can be an javacript call or an variable from the data context."
				},
				{
					"type": "button",
					"text": "full reference the expression",
					"link": "index.html?module=core&page=1#expression-language",
					"linktype": "relativ"
				}
			]
		},
		{
			"tag": "jstl-if",
			"title": "jstl-if",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "With \"jstl-if\" you can determinate to render or not render an tag element. If the expression determinated to not render, it will stops all other processing steps and removed the element with all childs from dom tree."
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-if sample",
					"content": "<[any tag] jstl-if=\"true|false|${variable|javascript}\"></[any tag]>"
				},
				{
					"type": "text",
					"content": "As value of the \"jstl-if\" attribute you can use the Strings \"true\" or \"false\", an variable name from the data context or execute any javascript expression. The result should always be a boolean."
				}
			]
		},
		{
			"tag": "jstl-data",
			"title": "jstl-data",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "With \"jstl-data\" you can manipulate the data context. You can add static values or objects, manipulate exsisting values or you can run a html request to get json."
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-data sample",
					"content": "<[any tag] jstl-data=\"[object|string|expression]\" jstl-data-mode=\"[direct|remote|url-parameter]\" jstl-data-var=\"[a variable name]\" jstl-data-options=\"[ajax request options]\" jstl-data-datatype=\"xml|json\"></[any tag]>"
				},
				{
					"type": "text",
					"headline": "\"jstl-data\" - Attribute (requiered)",
					"content": [
						"At content of this attribute, you can define a json object, evaluate an variable, run a javascript expression or use a static string. All this ways can be combined with evaluating a variable or execute an javascript.\nThe condition for the expression is, that the result must be a string or an object.",
						"If you use a static string, it is posible to comibe it with the \"jstl-data-mode\" attribute. "
					]
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-data sample",
					"content": [
						"<!--\"jstl-data\" - Attribute samples as static url string-->",
						"<[any tag] jstl-data=\"/url/to/json/data\" jstl-data-mode=\"remote\" jstl-data-datatype=\"xml|json\"></[any tag]>",
						"<!--\"jstl-data\" - Attribute samples as static string to recive a prameter value-->",
						"<[any tag] jstl-data=\"my-html-parameter\" jstl-data-mode=\"url-parameter\"></[any tag]>",
						"<!--\"jstl-data\" - Attribute samples as object-->",
						"<[any tag] jstl-data=\"{myObject:'my object value'}\"></[any tag]>",
						"<!--\"jstl-data\" - Attribute samples as dynamic value-->",
						"<[any tag] jstl-data=\"${my-variable-or-javscript-expression}\" jstl-data-mode=\"[direct|remote|url-parameter]\"></[any tag]>",
						"",
						"<!--\"jstl-data\" - Attribute samples as dynamic combination to a url-->",
						"<[any tag] jstl-data=\"/url/to/json/${dynmic data}\" jstl-data-mode=\"remote\"></[any tag]>"
					],
					"subcontent": "If you want to run a request, you must add \"jstl-data-mode='remote'\", to get url parameter you must add \"jstl-data-mode='url-parameter'\". Also, you can full combine dynamic expression with static content."
				},
				{
					"type": "text",
					"headline": "\"jstl-data-mode\" - Attribute (optional - default value \"direct\")",
					"content": [
						"\"jstl-data-mode\" can be three values:",
						"",
						"\t- \"direct\"\t-> this is the default value and means that the expression be evaluated and add to the data context.",
						"\t- \"remote\"\t-> this value means that the value of the \"jstl-data\" expression results in a ajax call to get json data.",
						"\t- \"url-parameter\"\t-> this value means that the value of the \"jstl-data\" expression used to evaluate a value as url parameter."
					]
				},
				{
					"type": "text",
					"headline": "\"jstl-data-var\" - Attribute (optional)",
					"content": "The value of this attribute must be a static string. With the static string you define a new variable at your data context. If the \"jstl-data-var\" not availible or ist the value empty, the evaluated data would be merged into data context and can override existing values. Be carrful!"
				},
				{
					"type": "text",
					"headline": "\"jstl-data-options\" - Attribute (optional)",
					"content": "The value must be an object. This object would be merged with the ajax request object from jquery. You are able to change all default values, without \"success\" and \"error\". Be carrful if you use this feature!"
				},
				{
					"type": "text",
					"headline": "\"jstl-data-datatype\" - Attribute (optional - only with jstl-data-mode=\"remote\")",
					"content": "If jstl-data-datatype=\"xml\", then the xml would be converted to json! Only JSON can be processed"
				},
				{
					"type": "button",
					"text": "XML to JSON Converting",
					"link": "index.html?module=core&page=3#converter",
					"linktype": "relativ"
				}
			]
		},		
		{
			"tag": "jstl-include",
			"title": "jstl-include",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "This attribute indicate the feature to load a new teamplate file by a html request. The content of this request would be include as child of the current element and would be processed by JSTL."
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-include sample",
					"content": "<[any tag] jstl-include=\"[string|expression]\" jstl-include-mode=\"[append|prepend|replace]\" jstl-include-options=\"[ajax request options]\" jstl-include-cache-disabled jstl-include-ajax-cache-disabled></[any tag]>"
				},
				{
					"type": "text",
					"headline": "\"jstl-include\" - Attribute (required)",
					"content": "The value must be a url string. You can use a static url string, an expression or you can combine static string with an expression."
				},
				{
					"type": "text",
					"headline": "\"jstl-include-mode\" - Attribute (optional - default value \"replace\")",
					"content": [
						"\"jstl-include-mode\" can be three values:",
						"",
						"\t- \"append\"\t-> append the content of the template as a child.",
						"\t- \"prepend\"\t-> prepend the content of the template as a child.",
						"\t- \"replace\"\t-> replaced all child with the content from the template."
					]
				},
				{
					"type": "text",
					"headline": "\"jstl-include-options\" - Attribute (optional)",
					"content": "The value must be an object. This object would be merged with the ajax request object from jquery. You are able to change all default values, without \"success\" and \"error\". Be carrful if you use this feature!"
				},
				{
					"type": "text",
					"headline": "\"jstl-include-cache-disabled\" - Attribute (optional)",
					"content": "This attribute disabled the build in template cache! If the template url with a query, the cache would be disabled by default! This cache works not across page requests."
				},
				{
					"type": "text",
					"headline": "\"jstl-include-ajax-cache-disabled\" - Attribute (optional)",
					"content": "This attribute disabled the ajax request cache/ browser cache! If the template url with a query, the cache would be disabled by default!"
				}
			]
		},
		{
			"tag": "jstl-choose",
			"title": "jstl-choose",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "\"jstl-choose\" is aquivalent to \"if - else if - else\" or \"switch\" construction in javascript or other programming languages. The \"jstl-choose\" attribute is an marker attribute and don't need a value."
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-choose sample",
					"content": [
						"<[any tag] jstl-choose>",
						"\t<[any tag] jstl-when=\"[true|false|expression]\"></[any tag]>",
						"\t<[any tag] jstl-otherwise></[any tag]>",
						"</[any tag]>"
					],
					"subcontent": "Is an element marked with \"jstl-choose\", then there childs are evaluated to which child be rendered. All other childs would be removed!"
				},
				{
					"type": "text",
					"headline": "jstl-when - required",
					"content": "\"jstl-when\" is aquivalent ti \"jstl-if\". It the same functionality! As value of the \"jstl-when\" attribute you can use the Strings \"true\" or \"false\", an variable name from the data context or execute any javascript expression. The result should always be a boolean. It is possible to define multible child elements with the \"jstl-when\" attribute. The first element with \"jstl-when\" result \"true\" will be rendered. All other elements are removed!"
				},
				{
					"type": "text",
					"headline": "jstl-otherwise - optional",
					"content": "\"jstl-otherwise\" is optional and defines the default case. Is not an \"jstl-when\" case evaluated to true, \"jstl-otherwise\" will be rendered. Only once time, \"jstl-otherwise\" can be defined at \"jstl-choose\"!"
				}
			]
		},
		{
			"tag": "jstl-foreach",
			"title": "jstl-foreach",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "\"jstl-foreach\" is the feature to loop over an array or over the properties of an object."
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-foreach sample",
					"content": [
						"<[any tag] jstl-foreach=\"[expression]\" jstl-foreach-var=\"string\" jstl-foreach-status=\"string\" jstl-foreach-start-index=\"[number|expression]\" jstl-foreach-break-condition=\"[expression]\">",
						"\t[any content]",
						"</[any tag]>"
					]
				},
				{
					"type": "text",
					"headline": "jstl-foreach - required",
					"content": "\"jstl-foreach\" the value of this attribute must be an epression and it is required that the expression evaluate an arry, an object or a undefined!"
				},
				{
					"type": "text",
					"headline": "jstl-foreach-var - option (default is \"itemVar\")",
					"content": "With \"jstl-foreach-var\" you can define your running variable! This is fully optional but helpful to get an better anderstanding of your template at a later time."
				},
				{
					"type": "text",
					"headline": "jstl-foreach-status - option (default is \"statusVar\")",
					"content": "With \"jstl-foreach-status\" you can define your running variable for the iteration context! This is fully optional but helpful to get an better anderstanding of your template at a later time."
				},
				{
					"type": "text",
					"headline": "jstl-foreach-start-index - option (default is \"0\")",
					"content": "With \"jstl-foreach-start-index\" set the first index at array iteration."
				},
				{
					"type": "text",
					"headline": "jstl-foreach-break-condition - optional",
					"content": "With \"jstl-foreach-break-condition\" if the expression evaluated to \"true\" the iteration will be stopped"
				},
				{
					"type": "code",
					"codetype": "javascript",
					"headline": "object structure for \"jstl-foreach-status\" variable",
					"content": [
						"{",
						"\t\"index\" : [index starts by 0],",
						"\t\"number\" : [starts by 1],",
						"\t\"key\": [property name - only by object iterating],",
						"\t\"count\" : [count of items or properties],",
						"\t\"data\" : [the array or object],",
						"\t\"context\" : [the full data context]",
						"}"
					]
				}
			]
		},
		{
			"tag": "jstl-databind",
			"title": "jstl-databind",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "With \"jstl-databind\" you can bind a value on the dom element. JSTL used the jQuery data function to bind values!"
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-databind sample",
					"content": "<[any tag] jstl-databind=\"[object|string|expression]\" jstl-databind-name=\"[a variable name]\" ></[any tag]>"
				},
				{
					"type": "text",
					"headline": "\"jstl-databind\" - Attribute (requiered)",
					"content": [
						"At content of this attribute, you can define a json object, evaluate an variable, run a javascript expression or use a static string. All this ways can be combined with evaluating a variable or execute an javascript.\nThe condition for the expression is, that the result must be a string or an object."
					]
				}				,
				{
					"type": "text",
					"headline": "\"jstl-databind-name\" - Attribute (requiered)",
					"content": [
						"The value of this attribute must be a static string. With the static string you define a new variable at data context of the dom element."
					]
				}
			]
		},
		{
			"tag": "jstl-eventbind",
			"title": "jstl-eventbind",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "\"jstl-eventbind\" execute the event binding from the \"de.titus.core\" module!"
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-eventbind sample",
					"content": "<[any tag] jstl-eventbind=\"\" event-type=\"[eventname]\" event-action=\"[expression to a function]\" event-data=\"[any]\" event-prevent-default=\"\"></[any tag]>"
				},
				{
					"type": "text",
					"headline": "\"jstl-eventbind\" - Attribute (requiered)",
					"content": [
						"This tells the jstl processor to start the event binding for this element.",
						"The process will be pass the current data context as context to the event binding.",
						"Be careful: if you define \"event-data\" the jstl context will not passt to the event handler"
					]
				},
				{
					"type": "button",
					"text": "reference for event binding",
					"link": "index.html?module=core&page=2#reference",
					"linktype": "relativ"
				}
			]
		},
		{
			"tag": "jstl-add-atribute",
			"title": "jstl-add-atribute",
			"teaser": "",
			"content": [
				{
					"type": "text",
					"content": "With \"jstl-add-atribute\" you can add a html tag attribute."
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "jstl-add-atribute",
					"content": "<[any tag] jstl-add-attribute=\"[string|expression|json object string|json array]\"></[any tag]>",
					"subcontent": ""
				},
				{
					"type": "text",
					"headline": "a typical use case",
					"content": "With this feature you can prevent the bowser to make failing request. For exsampe, you want to add an image tag with non static url. The browser parse the image tag and want to load the image from the src attribute automatacly. To prevent the browser, you can add the \"jstl-add-attribute\" attribute instead of src attribute.."
				},
				{
					"type": "code",
					"codetype": "html",
					"content": "<img jstl-add-attribute=\"{name:'src', value:data.url.to.my.image}\"></img>",
					"subcontent": "At this sample, we generate an image, but the src attribute from the image, would be dymamicly generated by the data of the data context."
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "possible \"jstl-add-attribute\" attribute values",
					"content": [
						"<!-- add an single attribute -->",
						"<[any tag] jstl-add-attribute=\"{name:[attribute name, value:[attribute value]}\"></[any tag]>",
						"<!-- add multible attributes -->",
						"<[any tag] jstl-add-attribute=\"[{name:[attribute name, value:[attribute value]},...]\"></[any tag]>",
						"",
						"<!-- add by attributes expression-->",
						"<[any tag] jstl-add-attribute=\"${my.data}\"></[any tag]>"
					],
					"subcontent": "If you use an expression, it is required that the result has the same structure of the json object or json array."
				}
			]
		},
		{
			"tag": "content-replacement",
			"title": "Content Replacement",
			"teaser": "How to add my data into html.",
			"content": [
				{
					"type": "text",
					"content": "You can add your data as content or attribute value where every you want. If you want to added data you must be write an expression at this place you want to be add."
				},
				{
					"type": "code",
					"codetype": "html",
					"headline": "possible \"jstl-add-attribute\" attribute values",
					"content": [
						"<!-- data as content of an element -->",
						"<[any tag] any-attribute-you-want>${my.data}</[any tag]>",
						"<!-- data as content of an element -->",
						"<[any tag] any-attribute-you-want>",
						"\t${my.data}",
						"</[any tag]>",
						"",
						"<!-- data as attribute value of an element -->",
						"<[any tag] any-attribute-you-want my-attribute=\"${my.data}\"></[any tag]>"
					],
					"subcontent": "For more samples, take a look at this documentation app. This app is fully written with JSTL"
				},
				{
					"type": "text",
					"headline": "jstl-text-ignore",
					"content": "With \"jstl-text-ignore\", the text content is not processed!"
				},
				{
					"type": "text",
					"headline": "jstl-text-content-type",
					"content": "\"jstl-text-content-type\" defines how text content is processed. Possible values are \"text\", \"json\" and \"html\"."
				},
				{
					"type": "text",
					"headline": "jstl-text-prevent-format",
					"content": "\"text-prevent-format\" will retain the formatting. This only availible at plain text content."
				},
				{
					"type": "text",
					"headline": "jstl-text-trim-length",
					"content": "With this \"text-trim-length\" attribute you can define a max length of text, that will be insert as content. This would only works with plain text."
				}
			]
		}
	]
}
